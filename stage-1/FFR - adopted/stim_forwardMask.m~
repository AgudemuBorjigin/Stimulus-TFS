function [out] = stim_forwardMask(dur, fc, fs, ramp)
t = 0:1/fs:dur-1/fs;
probe = sin(2*pi*fc*t);
probe = probe/rms(probe);

% band_limited "white" noise
% filter parameters for filtering white noise, ERB: Glasberg and Moore 1990
%ERB = fc/5; % simpler version of the ERB calculation
ERB = 24.7*(4.37*fc/1000+1);
fLow = fc - ERB/2;
fHigh = fc + ERB/2;
fn = fs/2;
[b, a] = butter(2,[fLow/fn fHigh/fn]); % 2nd order butterworth filtering
% filtered white noise as masker
masker = randn(1, numel(t));
scale_mask = rms(masker);
masker = filtfilt(b, a, masker);
masker = masker/scale_mask;

t1 = 0:1/fs:0.05-1/fs;
gap1 = zeros(1, numel(t1));
t2 = 0:1/fs:0.001-1/fs;
gap2 = zeros(1, numel(t2));

out = [probe gap1 masker gap2 probe gap1 masker gap1 gap1 gap1 gap1];
out = rampsound(out, fs, ramp);
end

tone / rms(tone) + noise * db2mag(10) / rms(noise)